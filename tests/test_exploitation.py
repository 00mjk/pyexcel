import os
import pyexcel as pe
import pyexcel.ext.xls
import pyexcel.ext.xlsx
from _compact import BytesIO, StringIO


class TestIrregularities:
    def setUp(self):
        self.testfile = "test.xlsm"
        self.content = [
            [1, "", "", "", "",  ""],
            [1, 2, "", "", "",  ""],
            [1, 2, 3, "", "",  ""],
            [1, 2, 3, 4, "",  ""],
            [1, 2, 3, 4, 5,  ""],
            [1, 2, 3, 4, 5,  6],
            [1, "", "", "", "",  ""],
            [1, 2, "", "", "",  ""],
            [1, 2, 3, "", "",  ""],
            [1, 2, 3, 4, "",  ""],
            [1, 2, 3, 4, 5,  ""]
        ]
        pe.save_as(dest_file_name=self.testfile,
                   array=self.content)

    def test_irregular_data_file(self):
        r = pe.Reader(self.testfile)
        result = pe.utils.to_array(r.rows())
        assert result == self.content

    def test_irregular_data_file_flatten_to_dict(self):
        r = pe.Reader(self.testfile)
        result = pe.utils.to_dict(r.enumerate())
        actual = {
            'Series_65': 5.0,
            'Series_56': 2.0,
            'Series_52': '',
            'Series_48': '',
            'Series_57': 3.0,
            'Series_64': 4.0,
            'Series_50': 2.0,
            'Series_18': '',
            'Series_19': 1.0,
            'Series_51': 3.0,
            'Series_14': 2.0,
            'Series_15': 3.0,
            'Series_16': '',
            'Series_17': '',
            'Series_10': '',
            'Series_11': '',
            'Series_12': '',
            'Series_13': 1.0,
            'Series_36': 6.0,
            'Series_37': 1.0,
            'Series_34': 4.0,
            'Series_35': 5.0,
            'Series_32': 2.0,
            'Series_33': 3.0,
            'Series_30': '',
            'Series_31': 1.0,
            'Series_58': 4.0,
            'Series_54': '',
            'Series_38': '',
            'Series_39': '',
            'Series_60': '',
            'Series_53': '',
            'Series_49': 1.0,
            'Series_8': 2.0,
            'Series_9': '',
            'Series_6': '',
            'Series_7': 1.0,
            'Series_4': '',
            'Series_5': '',
            'Series_2': '',
            'Series_3': '',
            'Series_1': 1.0,
            'Series_61': 1.0,
            'Series_66': '',
            'Series_59': '',
            'Series_63': 3.0,
            'Series_62': 2.0,
            'Series_43': 1.0,
            'Series_55': 1.0,
            'Series_28': 4.0,
            'Series_25': 1.0,
            'Series_24': '',
            'Series_27': 3.0,
            'Series_26': 2.0,
            'Series_21': 3.0,
            'Series_20': 2.0,
            'Series_23': '',
            'Series_22': 4.0,
            'Series_47': '',
            'Series_46': '',
            'Series_45': '',
            'Series_44': 2.0,
            'Series_29': 5.0,
            'Series_42': '',
            'Series_41': '',
            'Series_40': ''}
        assert result == actual

    def test_irregular_data_file_rows_to_dict(self):
        r = pe.Reader(self.testfile)
        result = pe.utils.to_dict(r.rows())
        actual = {
            'Series_11': [1.0, 2.0, 3.0, 4.0, 5.0, ''],
            'Series_8': [1.0, 2.0, '', '', '', ''],
            'Series_9': [1.0, 2.0, 3.0, '', '', ''],
            'Series_6': [1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
            'Series_7': [1.0, '', '', '', '', ''],
            'Series_4': [1.0, 2.0, 3.0, 4.0, '', ''],
            'Series_5': [1.0, 2.0, 3.0, 4.0, 5.0, ''],
            'Series_10': [1.0, 2.0, 3.0, 4.0, '', ''],
            'Series_3': [1.0, 2.0, 3.0, '', '', ''],
            'Series_1': [1.0, '', '', '', '', ''],
            'Series_2': [1.0, 2.0, '', '', '', '']
        }
        assert result == actual

    def test_irregular_data_file_columns_to_dict(self):
        r = pe.Reader(self.testfile)
        result = pe.utils.to_dict(r.columns())
        actual = {
            'Series_6': ['', '', '', '', '', 6.0, '', '', '', '', ''],
            'Series_4': ['', '', '', 4.0, 4.0, 4.0, '', '', '', 4.0, 4.0],
            'Series_5': ['', '', '', '', 5.0, 5.0, '', '', '', '', 5.0],
            'Series_2': ['', 2.0, 2.0, 2.0, 2.0, 2.0, '', 2.0, 2.0, 2.0, 2.0],
            'Series_3': ['', '', 3.0, 3.0, 3.0, 3.0, '', '', 3.0, 3.0, 3.0],
            'Series_1': [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
        }
        assert result == actual

    def tearDown(self):
        if os.path.exists(self.testfile):
            os.unlink(self.testfile)


class TestIrregularities2:
    def setUp(self):
        self.testfile = "test.xlsm"
        self.content = {
            'Series_6': ['', '', '', '', '', 6.0],
            'Series_5': ['', '', '', '', '', 5.0, 5.0, '', '', ''],
            'Series_4': ['', '', '', 4.0, 4.0, 4.0, '', '', '', 4.0, 4.0],
            'Series_3': ['', '', 3.0, 3.0, 3.0, 3.0, '', '', 3.0, 3.0, 3.0],
            'Series_2': ['', 2.0, 2.0, 2.0, 2.0, 2.0],
            'Series_1': [1.0]
        }
        pe.save_as(dest_file_name=self.testfile,
                   adict=self.content)

    def test_write_irregular_dict_to_file(self):
        r = pe.SeriesReader(self.testfile)
        actual = [
            [1, "", "", "", "", ""],
            ["", 2, "", "", "", ""],
            ["", 2, 3, "", "", ""],
            ["", 2, 3, 4, "", ""],
            ["", 2, 3, 4, "", ""],
            ["", 2, 3, 4, 5, 6],
            ["", "", "", "", 5, ""],
            ["", "", "", "", "", ""],
            ["", "", 3, "", "", ""],
            ["", "", 3, 4, "", ""],
            ["", "", 3, 4, "", ""]
        ]
        result = pe.utils.to_array(r.rows())
        assert actual == result

    def tearDown(self):
        if os.path.exists(self.testfile):
            os.unlink(self.testfile)

            
class TestIrregularities10:
    def setUp(self):
        self.testfile = "test.xlsm"
        self.content = [
            [1.0],
            ['', 2.0, 2.0, 2.0, 2.0, 2.0],
            ['', '', 3.0, 3.0, 3.0, 3.0, '', '', 3.0, 3.0, 3.0],
            ['', '', '', 4.0, 4.0, 4.0, '', '', '', 4.0, 4.0],
            ['', '', '', '', '', 5.0, 5.0, '', '', ''],
            ['', '', '', '', '', 6.0]
        ]
        sheet = pe.get_sheet(array=self.content)
        sheet.transpose()
        sheet.save_as(self.testfile)

    def test_write_irregular_arrays_to_file(self):
        r = pe.Reader(self.testfile)
        actual = [
            [1, "", "", "", "", ""],
            ["", 2, "", "", "", ""],
            ["", 2, 3, "", "", ""],
            ["", 2, 3, 4, "", ""],
            ["", 2, 3, 4, "", ""],
            ["", 2, 3, 4, 5, 6],
            ["", "", "", "", 5, ""],
            ["", "", "", "", "", ""],
            ["", "", 3, "", "", ""],
            ["", "", 3, 4, "", ""],
            ["", "", 3, 4, "", ""]
        ]
        result = pe.utils.to_array(r.rows())
        assert actual == result

    def tearDown(self):
        if os.path.exists(self.testfile):
            os.unlink(self.testfile)


class TestIrregularities3:
    def setUp(self):
        self.testfile = "test.csv"
        self.content = []
        pe.save_as(dest_file_name=self.testfile,
                   array=self.content)

    def test_file_there(self):
        if os.path.exists(self.testfile):
            assert 1 == 1

    def test_file_content(self):
        r = pe.Reader(self.testfile)
        result = pe.utils.to_array(r)
        assert result == []

    def tearDown(self):
        if os.path.exists(self.testfile):
            os.unlink(self.testfile)


class TestMultiSheetReader:
    def setUp(self):
        self.testfile = "file_with_an_empty_sheet.xlsx"

    def test_reader_with_correct_sheets(self):
        r = pe.BookReader(os.path.join("tests", "fixtures", self.testfile))
        assert r.number_of_sheets() == 3

class TestEmptyCSVFile:
    def setUp(self):
        self.testfile = os.path.join("tests", "fixtures", "empty.csv")

    def test_number_of_columns(self):
        r = pe.Reader(self.testfile)
        assert r.number_of_columns() == 0

class TestNonUniformCSVFile:
    def setUp(self):
        self.testfile = os.path.join("tests", "fixtures", "non-uniform-rows.csv")

    def test_number_of_columns(self):
        r = pe.Reader(self.testfile)
        assert r.number_of_columns() == 8
        result = [['1', '', '', '', '', '', '', ''],
                  ['1', '2', '', '', '', '', '', ''],
                  ['1', '2', '3', '', '', '', '', ''],
                  ['1', '2', '3', '4', '', '', '', ''],
                  ['1', '2', '3', '4', '5', '', '', ''],
                  ['1', '2', '3', '4', '5', '6', '', ''],
                  ['1', '2', '3', '4', '5', '6', '7', '8']]
        actual = pe.utils.to_array(r)
        assert result == actual

class TestMergeFiles:
    def test_merge_two_csv_files(self):
        file1 = os.path.join("tests", "fixtures", "test_cook_book_merge_numbers.csv")
        file2 = os.path.join("tests", "fixtures", "test_cook_book_merge_alphabets.csv")
        file_list = [file1, file2]
        pe.cookbook.merge_files(file_list)
        r = pe.Reader("pyexcel_merged.csv")
        data = pe.utils.to_array(r)
        actual = [
            ['1', '2', '3', 'a', 'b', 'c'],
            ['4', '5', '6', 'd', 'e', 'f'],
            ['7', '8', '9', 'g', 'h', 'I']
        ]
        assert actual == data

    def test_merge_two_csv_files_2(self):
        file1 = os.path.join("tests", "fixtures", 
                             "test_cook_book_merge_numbers_2.csv")
        file2 = os.path.join("tests", "fixtures",
                             "test_cook_book_merge_alphabets_2.csv")
        file_list = [file1, file2]
        pe.cookbook.merge_files(file_list)
        r = pe.Reader("pyexcel_merged.csv")
        data = pe.utils.to_array(r)
        print(data)
        actual = [
            ['1', '2', '3', '', '', '', '', 'a', 'b', 'c', '', ''],
            ['4', '5', '6', '10', '11', '12', '', 'd', 'e', 'f', 'm', 'q'],
            ['7', '8', '9', '', '', '', '9', 'g', 'h', 'I', 'n', 'p']
        ]
        assert actual == data

    def tearDown(self):
        if os.path.exists("pyexcel_merged.csv"):
            os.unlink("pyexcel_merged.csv")
